This is the notes file by bubbles231 for Prototype
Description:
    The programs purpose is for me to make a collision detection system for MarioQuest.
    The benefit is that i only have to handle pygame rectangles and surfaces and simple stuff so i can make
    progress faster. My goal is for me to make a collision detection system as described in highorderfun.
    Goal 1: Handle tiles without slopes
    Goal 2: Handle all tile sizes
    Goal 3: Handle multiple tilesets
    Goal 4: Handle moving platform collision
    End Goal: Make this usable for MarioQuest

Notes 11/25/13
---------------
DONE:
    I have made this into a git repository.
    I am going to make a new file called Helpers to contain all functions. I will make the player and tileset
    methods
    into helper functions for easy reuse.
    The react_x and react_y will stay in the Player class and will be defined in an Enemy class
    add class TileSetsContainer which will contain all tilesets
    Tilesets will be blitted in order (self.priority 0 == first 10 == last)
NOT:
    Aspect ratio doesnt have to be 1:1
    Player handles TileSetContainer instead of tileset for collision, finds the closest tile out of all tilesets
    All tilesets will get there closest tile, TileSetsContainer will determine the closest out of all of them

-
Helpers was made because i would like future things to check for tile collisions like enemies and such.
This code is a little messy after hacking at it all night and doing major refactoring so clean it up.
Moving Platform code is messed up but don't do anything with it until done with above stuff.
#! Figure out the different tile ratio problem before moving on !#
-

Notes 11/26/13
---------------
GOAL FOR TODAY:
    Handle moving platforms visualy and logically. BUGGY
    Clean up the code.
    Try adding an enemy if all above is done
DONE:
    Half Done moving platforms: buggy
    Collision detection can now handle different tile ratios like: (32, 64).
    Handle multiple tilesets visualy and logically.
NOT:
    Platforms are not fully done
    Code still messy


Notes 11/29/13
--------------
GOAL FOR TODAY:
    Clean up code
    Make platforms not buggy and reusable: 1. Don't hardcode path, velocity,
    and etc 2. Collision Detection
DONE:
    Platform collision detection
NOT:
    Platform collision reaction; it is buggy
    Platform hardcoded path/velocity

NEW GOAL:
    Will continue without moving platforms for now


Design Note:
BackgroundManager() will have one instance per background image, an update method, a draw method
BackgroundContainer will contain all the backgrounds # HACKY as of now

Design Note:
!#!#!#!#
Almost all backgrounds will need to be modified to contain an Alpha channel and cropped so it looks right
!#!#!#!#

STOP messing WITH THE VISUALS THIS IS FOR COLLISIONS AND PHYSICS



Notes 02/04/14
--------------
GOAL FOR TODAY:
     Clean up code
     Finish slopes
     Platforms are not eliminated to be implemented later
Done:
     Finish slopes

I am going to merge Tile attr slope, floor_y, tall_edge, short_edge, adjacent_tile into one dict

NOTE: I a finished making one-way tiles and got collision detection partly done for ladders
reaction needs to be made for ladders!
##################################################################################################
make the logic make more sense with scan functions

Ladders cannot have one-way platforms underthem